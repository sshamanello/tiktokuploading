import os, time, shutil, pickle, logging, requests, zipfile
from dotenv import load_dotenv
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from datetime import datetime
import undetected_chromedriver as uc
from proxy_manager import ProxyManager


# === INIT ===
load_dotenv()
logging.basicConfig(filename="upload.log", level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s", datefmt="%Y-%m-%d %H:%M:%S", encoding='utf-8')
logger = logging.getLogger()

def log(msg): 
    try:
        print(msg)
        logger.info(msg)
    except UnicodeEncodeError:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –≤—ã–≤–µ—Å—Ç–∏ —ç–º–æ–¥–∑–∏, –∑–∞–º–µ–Ω—è–µ–º –∏—Ö –Ω–∞ —Ç–µ–∫—Å—Ç
        safe_msg = msg.encode('ascii', 'replace').decode('ascii')
        print(safe_msg)
        logger.info(safe_msg)

# === –ü–£–¢–ò ===
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
VIDEO_FOLDER = os.path.join(BASE_DIR, "VideosDirPath")
UPLOADED_FOLDER = os.path.join(BASE_DIR, "uploaded")
TITLES_FILE = os.path.join(BASE_DIR, "titles.txt")
COOKIES_FILE = os.path.join(BASE_DIR, "CookiesDir", "tiktok_session-toptrailer82.cookie")
TIKTOK_UPLOAD_URL = "https://www.tiktok.com/upload"
os.makedirs(UPLOADED_FOLDER, exist_ok=True)

# === TELEGRAM ===
# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ telegram_notify.py
from telegram_notify import send_telegram_message

# === –î–†–ê–ô–í–ï–† –° –ü–†–û–ö–°–ò ===
def get_driver():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ProxyManager
    proxy_manager = ProxyManager()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏
    if proxy_manager.is_configured():
        success, message = proxy_manager.test_proxy_connection()
        if not success:
            log("‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
    else:
        log("‚ÑπÔ∏è –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ")

    # –ü–æ–ª—É—á–∞–µ–º ChromeOptions (—Å –ø—Ä–æ–∫—Å–∏, –µ—Å–ª–∏ –µ—Å—Ç—å)
    options = proxy_manager.get_enhanced_chrome_options()

    try:
        # –í–∞–∂–Ω–æ: —É–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é Chrome
        driver = uc.Chrome(version_main=138, options=options)

        # –£–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        driver.execute_cdp_cmd("Page.addScriptToEvaluateOnNewDocument", {
            "source": """
                Object.defineProperty(navigator, 'webdriver', {get: () => undefined});
                Object.defineProperty(navigator, 'plugins', {get: () => [1, 2, 3, 4, 5]});
                Object.defineProperty(navigator, 'languages', {get: () => ['en-US', 'en']});
                Object.defineProperty(navigator, 'permissions', {
                    get: () => ({
                        query: (params) => Promise.resolve({ state: 'granted' })
                    })
                });
            """
        })

        return driver

    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
        raise

# === –ü–†–û–í–ï–†–ö–ê IP ===
def check_ip(driver):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç IP –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º IP —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å–æ–≤
        ip_services = [
            "https://api.ipify.org",
            "https://ipinfo.io/ip",
            "https://icanhazip.com"
        ]
        
        for service in ip_services:
            try:
                driver.get(service)
                time.sleep(3)
                ip = driver.find_element(By.TAG_NAME, "body").text.strip()
                log(f"üåç IP —á–µ—Ä–µ–∑ {service}: {ip}")
                return ip
            except Exception as e:
                log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å IP —á–µ—Ä–µ–∑ {service}: {e}")
                continue
        
        return None
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ IP: {e}")
        return None

# === –ö–£–ö–ò ===
def load_cookies(driver, path):
    driver.get("https://www.tiktok.com/")
    with open(path, "rb") as f:
        cookies = pickle.load(f)
    for cookie in cookies:
        try: driver.add_cookie(cookie)
        except: continue
    driver.refresh()

def remove_cookie_banner(driver):
    try:
        driver.execute_script("""const b=document.querySelector('.tiktok-cookie-banner');if(b)b.remove();""")
        log("üßπ –ë–∞–Ω–Ω–µ—Ä cookie —É–¥–∞–ª—ë–Ω.")
    except Exception as e:
        log(f"‚ö†Ô∏è –ë–∞–Ω–Ω–µ—Ä –Ω–µ —É–¥–∞–ª—ë–Ω: {e}")

def get_video_and_title():
    videos = [f for f in os.listdir(VIDEO_FOLDER) if f.endswith((".mp4", ".mov"))]
    if not videos: raise Exception("‚ùå –ù–µ—Ç –≤–∏–¥–µ–æ.")
    with open(TITLES_FILE, "r", encoding="utf-8") as f: titles = f.readlines()
    if not titles: raise Exception("‚ùå titles.txt –ø—É—Å—Ç.")
    title = titles[0].strip()
    with open(TITLES_FILE, "w", encoding="utf-8") as f: f.writelines(titles[1:])
    return videos[0], title

def move_uploaded(filename):
    shutil.move(os.path.join(VIDEO_FOLDER, filename), os.path.join(UPLOADED_FOLDER, filename))

def upload_video():
    video_file, title = get_video_and_title()
    log(f"üé¨ –ó–∞–≥—Ä—É–∑–∫–∞: {video_file} | –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
    driver = get_driver()
    wait = WebDriverWait(driver, 60)

    try:
        load_cookies(driver, COOKIES_FILE)

        driver.get(TIKTOK_UPLOAD_URL)
        remove_cookie_banner(driver)

        upload_input = wait.until(EC.presence_of_element_located((By.XPATH, '//input[@type="file"]')))
        upload_input.send_keys(os.path.abspath(os.path.join(VIDEO_FOLDER, video_file)))

        wait.until(EC.presence_of_element_located((By.XPATH, '//span[contains(text(), "–ó–∞–≥—Ä—É–∂–µ–Ω–æ")]')))

        caption = wait.until(EC.presence_of_element_located((By.XPATH, '//div[@contenteditable="true"]')))
        ActionChains(driver).move_to_element(caption).click().perform()
        time.sleep(1)
        ActionChains(driver).key_down(Keys.CONTROL).send_keys("a").key_up(Keys.CONTROL)\
            .send_keys(Keys.BACKSPACE).send_keys(title).perform()

        publish = wait.until(EC.element_to_be_clickable((By.XPATH, '//button[@data-e2e="post_video_button"]')))
        time.sleep(1); publish.click(); time.sleep(8)

        move_uploaded(video_file)

        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        success_msg = f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {video_file}\nüìå –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\nüïí –í—Ä–µ–º—è: {now}"
        log(success_msg)
        send_telegram_message(success_msg)
    except Exception as e:
        error_msg = str(e)
        
        # –£–ø—Ä–æ—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
        if "NoSuchWindowException" in error_msg:
            error_msg = "‚ùå –û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: –æ–∫–Ω–æ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ"
        elif "no such window" in error_msg.lower():
            error_msg = "‚ùå –û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: –æ–∫–Ω–æ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ"
        elif "web view not found" in error_msg.lower():
            error_msg = "‚ùå –û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: –æ–∫–Ω–æ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ"
        elif "‚ùå –ù–µ—Ç –≤–∏–¥–µ–æ" in error_msg:
            error_msg = "‚ùå –ù–µ—Ç –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"
        elif "‚ùå titles.txt –ø—É—Å—Ç" in error_msg:
            error_msg = "‚ùå –ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –≤–∏–¥–µ–æ"
        else:
            # –£–±–∏—Ä–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –∏–∑ –æ—à–∏–±–∫–∏
            if "Stacktrace:" in error_msg:
                error_msg = error_msg.split("Stacktrace:")[0].strip()
            if "Session info:" in error_msg:
                error_msg = error_msg.split("Session info:")[0].strip()
            if "from unknown error:" in error_msg:
                error_msg = error_msg.split("from unknown error:")[0].strip()
            
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {error_msg}"
        
        log(error_msg)
        send_telegram_message(error_msg)
    finally:
        try:
            driver.quit()
        except Exception as e:
            log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")

if __name__ == "__main__":
    upload_video()
