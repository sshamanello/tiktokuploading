import os
import zipfile
import tempfile
import requests
import time
from dotenv import load_dotenv
from selenium.webdriver.chrome.options import Options

load_dotenv()

class ProxyManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏"""
    
    def __init__(self):
        self.proxy = os.getenv("PROXY")
        self.proxy_user = os.getenv("PROXY_USER")
        self.proxy_pass = os.getenv("PROXY_PASS")
        self.proxy_type = os.getenv("PROXY_TYPE", "http")
        
    def is_configured(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ –ø—Ä–æ–∫—Å–∏"""
        return all([self.proxy, self.proxy_user, self.proxy_pass])
    
    def get_proxy_dict(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø—Ä–æ–∫—Å–∏ –¥–ª—è requests"""
        if not self.is_configured():
            return None
            
        if self.proxy_type.lower() == "socks5":
            # –î–ª—è SOCKS5 –ø—Ä–æ–∫—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            return {
                "http": f"socks5://{self.proxy_user}:{self.proxy_pass}@{self.proxy}",
                "https": f"socks5://{self.proxy_user}:{self.proxy_pass}@{self.proxy}"
            }
        else:
            # –î–ª—è HTTP/HTTPS –ø—Ä–æ–∫—Å–∏
            return {
                "http": f"http://{self.proxy_user}:{self.proxy_pass}@{self.proxy}",
                "https": f"http://{self.proxy_user}:{self.proxy_pass}@{self.proxy}"
            }
    
    def test_proxy_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–∫—Å–∏"""
        if not self.is_configured():
            return False, "–ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            
        proxies = self.get_proxy_dict()
        
        try:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–ª—è SOCKS5 –ø—Ä–æ–∫—Å–∏
            timeout = 15 if self.proxy_type.lower() == "socks5" else 10
            response = requests.get("https://api.ipify.org", proxies=proxies, timeout=timeout)
            ip = response.text.strip()
            return True, f"–ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç, IP: {ip}"
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}"
    
    def create_proxy_extension(self, temp_dir=None):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ Chrome –¥–ª—è –ø—Ä–æ–∫—Å–∏"""
        if not self.is_configured():
            return None
            
        if not temp_dir:
            temp_dir = tempfile.mkdtemp()
            
        host, port = self.proxy.split(":")
        
        manifest_json = {
            "version": "1.0.0",
            "manifest_version": 2,
            "name": "Proxy Auth Extension",
            "permissions": [
                "proxy", "tabs", "unlimitedStorage", "storage", 
                "<all_urls>", "webRequest", "webRequestBlocking"
            ],
            "background": {"scripts": ["background.js"]},
            "minimum_chrome_version": "22.0.0"
        }
        
        background_js = f"""
        var config = {{
            mode: "fixed_servers",
            rules: {{
                singleProxy: {{
                    scheme: "{self.proxy_type}",
                    host: "{host}",
                    port: parseInt({port})
                }},
                bypassList: ["localhost", "127.0.0.1", "::1"]
            }}
        }};
        
        chrome.proxy.settings.set({{value: config, scope: "regular"}}, function() {{
            console.log('Proxy settings applied successfully');
        }});
        
        chrome.webRequest.onAuthRequired.addListener(
            function(details) {{
                return {{
                    authCredentials: {{
                        username: "{self.proxy_user}",
                        password: "{self.proxy_pass}"
                    }}
                }};
            }},
            {{urls: ["<all_urls>"]}},
            ['blocking']
        );
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø—Ä–æ–∫—Å–∏
        chrome.webRequest.onErrorOccurred.addListener(
            function(details) {{
                console.log('Proxy error:', details);
            }},
            {{urls: ["<all_urls>"]}}
        );
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        chrome.webRequest.onCompleted.addListener(
            function(details) {{
                console.log('Request completed:', details.url);
            }},
            {{urls: ["<all_urls>"]}}
        );
        """
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        manifest_path = os.path.join(temp_dir, "manifest.json")
        background_path = os.path.join(temp_dir, "background.js")
        
        with open(manifest_path, "w") as f:
            import json
            json.dump(manifest_json, f, indent=2)
            
        with open(background_path, "w") as f:
            f.write(background_js)
        
        # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
        extension_path = os.path.join(temp_dir, "proxy_extension.zip")
        with zipfile.ZipFile(extension_path, 'w') as zipf:
            zipf.write(manifest_path, "manifest.json")
            zipf.write(background_path, "background.js")
            
        return extension_path
    
    def add_proxy_to_options(self, options):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –∫ Chrome options"""
        if not self.is_configured():
            return options
            
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∫—Å–∏
        extension_path = self.create_proxy_extension()
        if extension_path:
            options.add_extension(extension_path)
            
        return options
    
    def get_enhanced_chrome_options(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–µ Chrome options —Å –ø—Ä–æ–∫—Å–∏"""
        options = Options()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
        options.add_argument("--start-maximized")
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--disable-extensions")
        options.add_argument("--disable-popup-blocking")
        options.add_argument("--ignore-certificate-errors")
        options.add_argument("--ignore-ssl-errors")
        options.add_argument("--log-level=3")
        options.add_argument("--disable-web-security")
        options.add_argument("--allow-running-insecure-content")
        options.add_argument("--disable-features=VizDisplayCompositor")
        options.add_argument("--disable-ipc-flooding-protection")
        options.add_argument("--disable-renderer-backgrounding")
        options.add_argument("--disable-background-timer-throttling")
        options.add_argument("--disable-backgrounding-occluded-windows")
        options.add_argument("--disable-client-side-phishing-detection")
        options.add_argument("--disable-default-apps")
        options.add_argument("--disable-hang-monitor")
        options.add_argument("--disable-prompt-on-repost")
        options.add_argument("--disable-sync")
        options.add_argument("--disable-translate")
        options.add_argument("--metrics-recording-only")
        options.add_argument("--no-first-run")
        options.add_argument("--safebrowsing-disable-auto-update")
        options.add_argument("--disable-component-update")
        options.add_argument("--disable-domain-reliability")
        options.add_argument("--disable-features=TranslateUI")
        
        # –°–∫—Ä—ã—Ç–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ (—É–±–∏—Ä–∞–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å undetected_chromedriver)
        # options.add_experimental_option("excludeSwitches", ["enable-automation"])
        # options.add_experimental_option('useAutomationExtension', False)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ User-Agent
        options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        if self.is_configured():
            self.add_proxy_to_options(options)
            
        return options

def test_proxy_manager():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç ProxyManager"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ProxyManager...")
    
    manager = ProxyManager()
    
    if not manager.is_configured():
        print("‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:")
        print("PROXY=host:port")
        print("PROXY_USER=username")
        print("PROXY_PASS=password")
        print("PROXY_TYPE=http (–∏–ª–∏ socks5)")
        return
    
    print("‚úÖ –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    print(f"üîß –¢–∏–ø –ø—Ä–æ–∫—Å–∏: {manager.proxy_type}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    success, message = manager.test_proxy_connection()
    print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {message}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    try:
        extension_path = manager.create_proxy_extension()
        print(f"üì¶ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {extension_path}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Chrome options
    try:
        options = manager.get_enhanced_chrome_options()
        print("‚úÖ Chrome options —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Chrome options: {e}")

if __name__ == "__main__":
    test_proxy_manager() 