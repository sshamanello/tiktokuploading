#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏
"""

import os
import sys
import requests
import time
from dotenv import load_dotenv

def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç .env —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    if not os.path.exists(".env"):
        print("üìù –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞...")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏:")
        proxy_host = input("–í–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å –ø—Ä–æ–∫—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 185.232.18.41): ").strip()
        proxy_port = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 63518): ").strip()
        proxy_user = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–∫—Å–∏: ").strip()
        proxy_pass = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–æ–∫—Å–∏: ").strip()
        proxy_type = input("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–∫—Å–∏ (http/https/socks5) [–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http]: ").strip() or "http"
        
        # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
        env_content = f"""# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
PROXY={proxy_host}:{proxy_port}
PROXY_USER={proxy_user}
PROXY_PASS={proxy_pass}
PROXY_TYPE={proxy_type}

# Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
TELEGRAM_BOT_TOKEN=your_bot_token_here
TELEGRAM_CHAT_ID=your_chat_id_here
"""
        
        with open(".env", "w", encoding="utf-8") as f:
            f.write(env_content)
            
        print("‚úÖ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω!")
        return True
    else:
        print("‚úÖ .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω")
        return True

def test_proxy_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–∫—Å–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏...")
    
    load_dotenv()
    
    proxy = os.getenv("PROXY")
    proxy_user = os.getenv("PROXY_USER")
    proxy_pass = os.getenv("PROXY_PASS")
    
    if not all([proxy, proxy_user, proxy_pass]):
        print("‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return False
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–∫—Å–∏
    proxy_type = os.getenv("PROXY_TYPE", "http")
    
    if proxy_type.lower() == "socks5":
        proxies = {
            "http": f"socks5://{proxy_user}:{proxy_pass}@{proxy}",
            "https": f"socks5://{proxy_user}:{proxy_pass}@{proxy}"
        }
    else:
        proxies = {
            "http": f"http://{proxy_user}:{proxy_pass}@{proxy}",
            "https": f"http://{proxy_user}:{proxy_pass}@{proxy}"
        }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å–æ–≤
    services = [
        ("https://api.ipify.org", "IPify"),
        ("https://ipinfo.io/ip", "IPInfo"),
        ("https://icanhazip.com", "ICanHazIP")
    ]
    
    success_count = 0
    
    for url, name in services:
        try:
            print(f"üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {name}...", end=" ")
            response = requests.get(url, proxies=proxies, timeout=10)
            ip = response.text.strip()
            print(f"‚úÖ {ip}")
            success_count += 1
        except Exception as e:
            print(f"‚ùå {e}")
    
    if success_count > 0:
        print(f"\nüéâ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {success_count}/{len(services)}")
        return True
    else:
        print("\n‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return False

def test_browser_proxy():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä...")
    
    try:
        from proxy_manager import ProxyManager
        
        manager = ProxyManager()
        
        if not manager.is_configured():
            print("‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        success, message = manager.test_proxy_connection()
        print(f"üîó {message}")
        
        if success:
            print("‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ ProxyManager")
            return True
        else:
            print("‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ ProxyManager")
            return False
            
    except ImportError:
        print("‚ùå ProxyManager –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
        return False

def show_current_ip():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π IP –±–µ–∑ –ø—Ä–æ–∫—Å–∏"""
    print("\nüåç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ IP (–±–µ–∑ –ø—Ä–æ–∫—Å–∏)...")
    
    try:
        response = requests.get("https://api.ipify.org", timeout=10)
        current_ip = response.text.strip()
        print(f"üìç –í–∞—à —Ç–µ–∫—É—â–∏–π IP: {current_ip}")
        return current_ip
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π IP: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    if not check_env_file():
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π IP
    current_ip = show_current_ip()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏
    proxy_works = test_proxy_connection()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä
    browser_works = test_browser_proxy()
    
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"–¢–µ–∫—É—â–∏–π IP: {current_ip}")
    print(f"–ü—Ä–æ–∫—Å–∏ (requests): {'‚úÖ' if proxy_works else '‚ùå'}")
    print(f"–ü—Ä–æ–∫—Å–∏ (browser): {'‚úÖ' if browser_works else '‚ùå'}")
    
    if proxy_works and browser_works:
        print("\nüéâ –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å final_upload.py")
    elif proxy_works:
        print("\n‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞")
    else:
        print("\n‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ")

if __name__ == "__main__":
    main() 